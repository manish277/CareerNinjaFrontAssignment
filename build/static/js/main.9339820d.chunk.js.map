{"version":3,"sources":["Table.js","SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","theme","head","backgroundColor","palette","common","black","color","white","body","fontSize","TableCell","root","action","hover","TableRow","createData","name","calories","fat","carbs","protein","makeStyles","table","minWidth","SearchBar","props","onTextChange","e","a","value","target","fetch","data","json","location","items","suggestion","length","regex","RegExp","sort","filter","val","test","setState","text","state","placeData","locationdata","this","map","onClick","suggestionSelect","index","attacker_1","attacker_2","attacker_3","attacker_4","defender_king","attacker_commander","attacker_king","attacker_outcome","attacker_size","battle_number","battle_type","defender_1","defender_2","defender_3","defender_4","defender_commander","defender_size","major_capture","major_death","note","region","summer","year","_id","key","Object","keys","toUpperCase","className","onChange","type","renderSuggestion","id","renderTableHeader","renderTableData","React","Component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gYAWwBA,aAAW,SAACC,GAAD,MAAY,CAC7CC,KAAM,CACJC,gBAAiBF,EAAMG,QAAQC,OAAOC,MACtCC,MAAON,EAAMG,QAAQC,OAAOG,OAE9BC,KAAM,CACJC,SAAU,OANUV,CAQpBW,KAEmBX,aAAW,SAACC,GAAD,MAAY,CAC5CW,KAAM,CACJ,qBAAsB,CACpBT,gBAAiBF,EAAMG,QAAQS,OAAOC,WAHrBd,CAMnBe,KAEJ,SAASC,EAAWC,EAAMC,EAAUC,EAAKC,EAAOC,GAC9C,MAAO,CAAEJ,OAAMC,WAAUC,MAAKC,QAAOC,WAIrCL,EAAW,iBAAkB,IAAK,EAAK,GAAI,GAC3CA,EAAW,qBAAsB,IAAK,EAAK,GAAI,KAC/CA,EAAW,SAAU,IAAK,GAAM,GAAI,GACpCA,EAAW,UAAW,IAAK,IAAK,GAAI,KACpCA,EAAW,cAAe,IAAK,GAAM,GAAI,KAGzBM,YAAW,CAC3BC,MAAO,CACLC,SAAU,O,ICxCOC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAQVC,aATmB,uCASJ,WAAOC,GAAP,yBAAAC,EAAA,6DACLC,EAAQF,EAAEG,OAAOD,MADZ,SAGQE,MAAM,+DAAD,OAAgEF,IAH7E,cAGLG,EAHK,gBAIMA,EAAKC,OAJX,OAIXC,EAJW,OAKLC,EAAQD,EACVE,EAAa,GACbP,EAAMQ,OAAS,IACTC,EAAQ,IAAIC,OAAJ,WAAeV,GAAS,KACtCO,EAAaD,EAAMK,OAAOC,QAAO,SAAAC,GAAG,OAAIJ,EAAMK,KAAKD,OAEvD,EAAKE,UAAS,iBAAO,CAAER,aAAYS,KAAMhB,MAX9B,4CATI,sDAGf,EAAKiB,MAAQ,CACTV,WAAY,GACZS,KAAM,GACNE,UAAW,IANA,E,sGAsBKlB,G,yFAIDE,MAAM,8DAAD,OAA+DF,I,cAAjFG,E,gBACeA,EAAKC,O,OAA1Be,E,OACAC,KAAKL,UAAS,iBAAO,CACjBC,KAAMhB,EACNO,WAAY,GACZW,UAAWC,M,gJAIC,IAAD,OACPZ,EAAea,KAAKH,MAApBV,WACR,OAA0B,IAAtBA,EAAWC,OACJ,KAGP,4BACKD,EAAWc,KAAI,SAACf,GAAD,OAAW,wBAAIgB,QAAS,kBAAM,EAAKC,iBAAiBjB,KAASA,S,wCAKrF,OAAOc,KAAKH,MAAMC,UAAUG,KAAI,SAACH,EAAWM,GAAW,IAC3CC,EAwBKP,EAxBLO,WACJC,EAuBSR,EAvBTQ,WACAC,EAsBST,EAtBTS,WACAC,EAqBSV,EArBTU,WAAYC,EAqBHX,EArBGW,cACZC,EAoBSZ,EApBTY,mBACAC,EAmBSb,EAnBTa,cACAC,EAkBSd,EAlBTc,iBACAC,EAiBSf,EAjBTe,cACAC,EAgBShB,EAhBTgB,cACAC,EAeSjB,EAfTiB,YACAC,EAcSlB,EAdTkB,WACAC,EAaSnB,EAbTmB,WACAC,EAYSpB,EAZToB,WACAC,EAWSrB,EAXTqB,WACAC,EAUStB,EAVTsB,mBACAC,EASSvB,EATTuB,cACApC,EAQSa,EARTb,SACAqC,EAOSxB,EAPTwB,cACAC,EAMSzB,EANTyB,YACAxD,EAKS+B,EALT/B,KACAyD,EAIS1B,EAJT0B,KACAC,EAGS3B,EAHT2B,OACAC,EAES5B,EAFT4B,OACAC,EACS7B,EADT6B,KACAC,EAAS9B,EAAT8B,IACJ,OACI,wBAAIC,IAAKD,GACL,4BAAKA,GACL,4BAAK7D,GACL,4BAAK4D,GACL,4BAAKb,GACL,4BAAKH,GACL,4BAAKF,GACL,4BAAKJ,GACL,4BAAKC,GACL,4BAAKC,GACL,4BAAKC,GACL,4BAAKQ,GACL,4BAAKC,GACL,4BAAKC,GACL,4BAAKC,GACL,4BAAKP,GACL,4BAAKG,GACL,4BAAKQ,GACL,4BAAKD,GACL,4BAAKT,GACL,4BAAKQ,GACL,4BAAKX,GACL,4BAAKU,GACL,4BAAKM,GACL,4BAAKzC,GACL,4BAAKwC,GACL,4BAAKD,S,0CAQjB,OAAyB,IADHxB,KAAKH,MAAnBC,UACMV,OACH,KAEE0C,OAAOC,KAAK/B,KAAKH,MAAMC,UAAU,IAChCG,KAAI,SAAC4B,EAAKzB,GACpB,OAAO,wBAAIyB,IAAKzB,GAAQyB,EAAIG,oB,+BAI1B,IACEpC,EAASI,KAAKH,MAAdD,KACR,OACI,yBAAKqC,UAAU,QACX,gEACA,yBAAKA,UAAU,aACX,2BAAOrD,MAAOgB,EAAMsC,SAAUlC,KAAKvB,aAAc0D,KAAK,SACrDnC,KAAKoC,oBAEV,wBAAIC,GAAG,SAAP,qBACA,2BAAOA,GAAG,eACN,+BACI,4BAAKrC,KAAKsC,qBACTtC,KAAKuC,yB,GAnISC,IAAMC,WCa9BC,MAZf,WACE,OACE,yBAAKT,UAAU,OACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,iBACb,kBAAC,EAAD,UCGUU,QACW,cAA7BC,OAAO3D,SAAS4D,UAEe,UAA7BD,OAAO3D,SAAS4D,UAEhBD,OAAO3D,SAAS4D,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9339820d.chunk.js","sourcesContent":["import React from 'react';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport SearchBar from \"./SearchBar\";\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nconst StyledTableRow = withStyles((theme) => ({\n  root: {\n    '&:nth-of-type(odd)': {\n      backgroundColor: theme.palette.action.hover,\n    },\n  },\n}))(TableRow);\n\nfunction createData(name, calories, fat, carbs, protein) {\n  return { name, calories, fat, carbs, protein };\n}\n\nconst rows = [\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n  createData('Eclair', 262, 16.0, 24, 6.0),\n  createData('Cupcake', 305, 3.7, 67, 4.3),\n  createData('Gingerbread', 356, 16.0, 49, 3.9),\n];\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 700,\n  },\n});\n\nexport default function CustomizedTables(header, data) {\n  const classes = useStyles();\n\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"customized table\">\n        <TableHead>\n          <TableRow>\n            <StyledTableCell>Dessert (100g serving)</StyledTableCell>\n            <StyledTableCell align=\"right\">Calories</StyledTableCell>\n            <StyledTableCell align=\"right\">Fat&nbsp;(g)</StyledTableCell>\n            <StyledTableCell align=\"right\">Carbs&nbsp;(g)</StyledTableCell>\n            <StyledTableCell align=\"right\">Protein&nbsp;(g)</StyledTableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row) => (\n            <StyledTableRow key={row.name}>\n              <StyledTableCell component=\"th\" scope=\"row\">\n                {row.name}\n              </StyledTableCell>\n              <StyledTableCell align=\"right\">{row.calories}</StyledTableCell>\n              <StyledTableCell align=\"right\">{row.fat}</StyledTableCell>\n              <StyledTableCell align=\"right\">{row.carbs}</StyledTableCell>\n              <StyledTableCell align=\"right\">{row.protein}</StyledTableCell>\n            </StyledTableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n","import React from 'react';\nimport './SearchBar.css'\nimport Table from \"./Table\";\nexport default class SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            suggestion: [],\n            text: '',\n            placeData: []\n        };\n    }\n    onTextChange = async (e) => {\n        const value = e.target.value;\n        let location;\n        const data = await fetch(`https://radiant-harbor-26955.herokuapp.com/autosearch?value=${value}`)\n        location = await data.json();\n        const items = location;\n        let suggestion = []\n        if (value.length > 0) {\n            const regex = new RegExp(`^${value}`, 'i');\n            suggestion = items.sort().filter(val => regex.test(val))\n        }\n        this.setState(() => ({ suggestion, text: value }))\n    }\n    async  suggestionSelect(value) {\n\n        let locationdata;\n\n        const data = await fetch(`https://radiant-harbor-26955.herokuapp.com/search?location=${value}`)\n        locationdata = await data.json();\n        this.setState(() => ({\n            text: value,\n            suggestion: [],\n            placeData: locationdata\n        }))\n    }\n\n    renderSuggestion() {\n        const { suggestion } = this.state;\n        if (suggestion.length === 0) {\n            return null\n        }\n        return (\n            <ul>\n                {suggestion.map((items) => <li onClick={() => this.suggestionSelect(items)}>{items}</li>)}\n            </ul>\n        )\n    }\n    renderTableData() {\n        return this.state.placeData.map((placeData, index) => {\n            const { attacker_1,\n                attacker_2,\n                attacker_3,\n                attacker_4, defender_king,\n                attacker_commander,\n                attacker_king,\n                attacker_outcome,\n                attacker_size,\n                battle_number,\n                battle_type,\n                defender_1,\n                defender_2,\n                defender_3,\n                defender_4,\n                defender_commander,\n                defender_size,\n                location,\n                major_capture,\n                major_death,\n                name,\n                note,\n                region,\n                summer,\n                year,\n                _id, } = placeData //destructuring\n            return (\n                <tr key={_id}>\n                    <td>{_id}</td>\n                    <td>{name}</td>\n                    <td>{year}</td>\n                    <td>{battle_number}</td>\n                    <td>{attacker_king}</td>\n                    <td>{defender_king}</td>\n                    <td>{attacker_1}</td>\n                    <td>{attacker_2}</td>\n                    <td>{attacker_3}</td>\n                    <td>{attacker_4}</td>\n                    <td>{defender_1}</td>\n                    <td>{defender_2}</td>\n                    <td>{defender_3}</td>\n                    <td>{defender_4}</td>\n                    <td>{attacker_outcome}</td>\n                    <td>{battle_type}</td>\n                    <td>{major_death}</td>\n                    <td>{major_capture}</td>\n                    <td>{attacker_size}</td>\n                    <td>{defender_size}</td>\n                    <td>{attacker_commander}</td>\n                    <td>{defender_commander}</td>\n                    <td>{summer}</td>\n                    <td>{location}</td>\n                    <td>{region}</td>\n                    <td>{note}</td>\n\n                </tr>\n            )\n        })\n    }\n    renderTableHeader() {\n        const { placeData } = this.state;\n        if (placeData.length === 0) {\n            return null\n        }\n        let header = Object.keys(this.state.placeData[0])\n        return header.map((key, index) => {\n            return <th key={index}>{key.toUpperCase()}</th>\n        })\n    }\n   \n    render() {\n        const { text } = this.state;\n        return (\n            <div className=\"main\">\n                <h1>Auto Search Bar for Battle Place</h1>\n                <div className='SearchBar'>\n                    <input value={text} onChange={this.onTextChange} type=\"text\"  />\n                    {this.renderSuggestion()}\n                </div>\n                <h1 id='title'>Battle Place Data</h1>\n                <table id='battlePlace'>\n                    <tbody>\n                        <tr>{this.renderTableHeader()}</tr>\n                        {this.renderTableData()}\n                    </tbody>\n                </table>\n\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport SearchBar from './SearchBar'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-component\">\n        <div className=\"App-component\">\n          <SearchBar />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}